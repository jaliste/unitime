<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC 
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<!-- 
 * UniTime 3.1 (University Timetabling Application)
 * Copyright (C) 2008, UniTime LLC
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 -->

<hibernate-mapping package="org.unitime.timetable.model">
	<class
		name="Curricula"
		table="curricula"
		>

 		<cache include="non-lazy" usage="read-write"/>

		<id 
            name="uniqueId"
            column="uniqueid" 
            type="java.lang.Long">            
            <generator class="org.unitime.commons.hibernate.id.UniqueIdGenerator">
				<param name="sequence">PREF_GROUP_SEQ</param>
			</generator>
            
        </id>
        
 		<property
			name="abbv"
			column="abbv"
			type="java.lang.String"
			not-null="true"
			length="20"
		/>

 		<property
			name="name"
			column="name"
			type="java.lang.String"
			not-null="true"
			length="20"
		/>
		
		<many-to-one 
			name="academicArea" 
			class="AcademicArea" 
			column="acad_area_id" 
			not-null="false"
			foreign-key="fk_curricula_acad_area"
		/>
		
		<many-to-one 
			name="department" 
			class="Department" 
			column="dept_id" 
			not-null="true"
			foreign-key="fk_curricula_dept"
		/>
		
		<set
			name="classifications"
			lazy="true"
			cascade="all" 
			inverse="true"
			>
			<cache include="non-lazy" usage="read-write"/>
			<key column="curricula_id" foreign-key="fk_curricula_clasf_curricula"/>
			<one-to-many class="CurriculaClassification"/>
		</set>			
	</class>
	
	<class
		name="CurriculaClassification"
		table="curricula_clasf"
		>

 		<cache include="non-lazy" usage="read-write"/>

		<id 
            name="uniqueId"
            column="uniqueid" 
            type="java.lang.Long">            
            <generator class="org.unitime.commons.hibernate.id.UniqueIdGenerator">
				<param name="sequence">PREF_GROUP_SEQ</param>
			</generator>
            
        </id>
        
        <many-to-one 
			name="curricula" 
			class="Curricula" 
			column="curricula_id" 
			not-null="true"
			foreign-key="fk_curricula_clasf_curricula"
		/>
        
 		<property
			name="name"
			column="name"
			type="java.lang.String"
			not-null="true"
			length="20"
		/>
		
		<many-to-one 
			name="academicClassification" 
			class="AcademicClassification" 
			column="acad_clasf_id" 
			not-null="false"
			foreign-key="fk_curricula_clasf_acad_clasf"
		/>
		
 		<property
			name="nrStudents"
			column="nr_students"
			type="java.lang.Integer"
			not-null="true"
		/>

 		<property
			name="llStudents"
			column="ll_students"
			type="java.lang.Integer"
			not-null="false"
		/>
		
 		<property
			name="llEnrollment"
			type="java.lang.Integer"
			formula="(select count(distinct aa.student_id) 
				from %SCHEMA%.student_acad_area aa, %SCHEMA%.curricula c where
				c.uniqueid = curricula_id and aa.acad_clasf_id = acad_clasf_id and aa.acad_area_id = c.acad_area_id)"
		/>

 		<property
			name="ord"
			column="ord"
			type="java.lang.Integer"
			not-null="true"
		/>

		<set
			name="courses"
			lazy="true"
			cascade="all" 
			inverse="true"
			>
			<cache include="non-lazy" usage="read-write"/>
			<key column="cur_clasf_id" foreign-key="fk_curricula_course_clasf"/>
			<one-to-many class="CurriculaCourse"/>
		</set>			
	</class>

	<class
		name="CurriculaCourse"
		table="curricula_course"
		>

 		<cache include="non-lazy" usage="read-write"/>

		<id 
            name="uniqueId"
            column="uniqueid" 
            type="java.lang.Long">            
            <generator class="org.unitime.commons.hibernate.id.UniqueIdGenerator">
				<param name="sequence">PREF_GROUP_SEQ</param>
			</generator>
            
        </id>
        
        <many-to-one 
			name="classification" 
			class="CurriculaClassification" 
			column="cur_clasf_id" 
			not-null="true"
			foreign-key="fk_curricula_course_clasf"
		/>
        
        <many-to-one 
			name="course" 
			class="CourseOffering" 
			column="course_id" 
			not-null="true"
			foreign-key="fk_curricula_course_course"
		/>

 		<property
			name="percShare"
			column="pr_share"
			type="java.lang.Float"
			not-null="true"
		/>

 		<property
			name="llShare"
			column="ll_share"
			type="java.lang.Float"
			not-null="false"
		/>
		
 		<property
			name="group"
			column="group_nr"
			type="java.lang.String"
			length="20"
			not-null="false"
		/>

 		<property
			name="ord"
			column="ord"
			type="java.lang.Integer"
			not-null="true"
		/>

 		<property
			name="llEnrollment"
			type="java.lang.Integer"
			formula="(select count(distinct d.student_id) 
				from %SCHEMA%.lastlike_course_demand d, course_offering co where
				co.uniqueid = course_id and co.subject_area_id = d.subject_area_id and
				((d.course_perm_id is not null and co.perm_id=d.course_perm_id) or
				(d.course_perm_id is null and co.course_nbr=d.course_nbr)))"
		/>
	</class>
</hibernate-mapping>
