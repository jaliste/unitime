<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<!-- 
 * UniTime 3.0 (University Course Timetabling & Student Sectioning Application)
 * Copyright (C) 2007, UniTime.org
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 -->

<hibernate-mapping package="org.unitime.timetable.model">
	<class
		name="InstructionalOffering"
		table="INSTRUCTIONAL_OFFERING">
		
 		<cache include="non-lazy" usage="read-write"/>
 		
        <id
            name="uniqueId"
            column="UNIQUEID"
            type="java.lang.Long"
			length="20"
        >
            <generator class="org.unitime.commons.hibernate.id.UniqueIdGenerator">
                <param name="sequence">INSTR_OFFR_SEQ</param>
            </generator>
        </id>
		
		<property
			name="instrOfferingPermId"
			column="INSTR_OFFERING_PERM_ID"
			type="java.lang.Integer"
			not-null="true"
			length="10"
		/>			
		
		<property
			name="notOffered"
			column="NOT_OFFERED"
			type="java.lang.Boolean"
			not-null="true"
		/>

		<property
			name="demand"
			type="java.lang.Integer"
			formula="(
					select /*+ RULE */ sum( co.lastlike_demand +
						(CASE WHEN cox.lastlike_demand is null THEN 0 ELSE cox.lastlike_demand END))
					from %SCHEMA%.course_offering co left outer join %SCHEMA%.course_offering cox on co.demand_offering_id=cox.uniqueid 
					where co.instr_offr_id = uniqueid)"
		/>
		 		
		<property
			name="projectedDemand"
			type="java.lang.Integer"
			formula=" ( select /*+ RULE */ sum(co.proj_demand) from %SCHEMA%.course_offering co where co.instr_offr_id = uniqueid ) "
		/>
		
		<property
			name="ctrlCourseId"
			type="java.lang.Integer"
			formula=" (select /*+ RULE */ co.uniqueid from %SCHEMA%.course_offering co where co.instr_offr_id = uniqueid and co.is_control = 1) "
		/>
		
		<property
		    name="limit"
		    type="java.lang.Integer"
		    formula=" ( select /*+ RULE */ sum(ioc.config_limit) from %SCHEMA%.instr_offering_config ioc where ioc.instr_offr_id = uniqueId ) "
		/>
		
		
		<many-to-one 
			name="session" 
			class="Session" 
			column="SESSION_ID" 
			not-null="true"
			foreign-key="FK_INSTR_OFFR_SESSION"
		/>
		
		<set
			name="courseOfferings"
			inverse="true"
			lazy="true"
			cascade="all-delete-orphan"
			table="COURSE_OFFERING"
			order-by="SUBJECT_AREA_ID,COURSE_NBR"
			>
	 		<cache include="non-lazy" usage="read-write"/> 		
			<key column="INSTR_OFFR_ID"/>
			<one-to-many class="CourseOffering"/>
		</set>

		<set
			name="instrOfferingConfigs"
			inverse="true"
			lazy="true"
			cascade="all-delete-orphan"
			table="INSTR_OFFERING_CONFIG"
			>
	 		<cache include="non-lazy" usage="read-write"/> 		
			<key column="INSTR_OFFR_ID"/>
			<one-to-many class="InstrOfferingConfig"/>
		</set>
		
		<set
			name="courseReservations"
			table="COURSE_RESERVATION"
			order-by="PRIORITY, COURSE_OFFERING"
			where="OWNER_CLASS_ID='I'"
			cascade="all-delete-orphan"
			inverse="true"
			lazy="true"
			>
	 		<cache include="non-lazy" usage="read-write"/> 		
			<key column="OWNER"/>
			<one-to-many class="CourseOfferingReservation"/>
		</set>
		
		<set
			name="individualReservations"
			table="INDIVIDUAL_RESERVATION"
			order-by="PRIORITY, EXPIRATION_DATE"
			where="OWNER_CLASS_ID='I'"
			cascade="all-delete-orphan"
			inverse="true"
			lazy="true"
			>
	 		<cache include="non-lazy" usage="read-write"/> 		
			<key column="OWNER"/>
			<one-to-many class="IndividualReservation"/>
		</set>
		
		<set
			name="studentGroupReservations"
			table="STUDENT_GROUP_RESERVATION"
			order-by="PRIORITY, STUDENT_GROUP"
			where="OWNER_CLASS_ID='I'"
			cascade="all-delete-orphan"
			inverse="true"
			lazy="true"
			>
	 		<cache include="non-lazy" usage="read-write"/> 		
			<key column="OWNER"/>
			<one-to-many class="StudentGroupReservation"/>
		</set>
		
		<set
			name="acadAreaReservations"
			table="ACAD_AREA_RESERVATION"
			order-by="PRIORITY, ACAD_AREA"
			where="OWNER_CLASS_ID='I'"
			cascade="all-delete-orphan"
			inverse="true"
			lazy="true"
			>
	 		<cache include="non-lazy" usage="read-write"/> 		
			<key column="OWNER"/>
			<one-to-many class="AcadAreaReservation"/>
		</set>
		
		<set
			name="posReservations"
			table="POS_RESERVATION"
			order-by="PRIORITY, POS_MAJOR"
			where="OWNER_CLASS_ID='I'"
			cascade="all-delete-orphan"
			inverse="true"
			lazy="true"
			>
	 		<cache include="non-lazy" usage="read-write"/> 		
			<key column="OWNER"/>
			<one-to-many class="PosReservation"/>
		</set>
		
		<many-to-one
		    name="consentType"
		    class="OfferingConsentType"
		    column="CONSENT_TYPE"
		    not-null="false"
		    insert="true"
		    update="true"
		/>
		
		<property
			name="designatorRequired"
			column="DESIGNATOR_REQUIRED"
			type="java.lang.Boolean"
			not-null="true"
		/>
		
		<set
			name="creditConfigs"
			inverse="true"
			lazy="true"
			cascade="all-delete-orphan"
			table="COURSE_CREDIT_UNIT_CONFIG"
			>
			<cache include="non-lazy" usage="read-write"/>
			<key column="INSTR_OFFR_ID"/>
			<one-to-many class="CourseCreditUnitConfig"/>
		</set>
		
		<property
			name="uniqueIdRolledForwardFrom"
			column="UID_ROLLED_FWD_FROM"
			type="java.lang.Long"
			not-null="false"
			length="20"
		/>
		
		<property
			name="externalUniqueId"
			column="EXTERNAL_UID"
			type="java.lang.String"
			not-null="false"
			length="40"
		/>
		
			
	</class>	
</hibernate-mapping>